[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dominic Schuhmacher. Author, maintainer. Björn Bähre. Author.            aha power diagrams Nicolas Bonneel. Author.            networkflow Carsten Gottschlich. Author.            simplex shortlist Valentin Hartmann. Author.            semidiscrete1 Florian Heinemann. Author.            transport_track networkflow integration Bernhard Schmitzer. Author.            shielding Jörn Schrieber. Author.            subsampling Timo Wilm. Contributor.            wpp","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schuhmacher D, BÃ¤hre B, Bonneel N, Gottschlich C, Hartmann V, Heinemann F, Schmitzer B, Schrieber J (2023). transport: Computation Optimal Transport Plans Wasserstein Distances. R package version 0.14-6, https://CRAN.R-project.org/package=transport.","code":"@Manual{,   title = {transport: Computation of Optimal Transport Plans and Wasserstein Distances},   author = {Dominic Schuhmacher and Björn Bähre and Nicolas Bonneel and Carsten Gottschlich and Valentin Hartmann and Florian Heinemann and Bernhard Schmitzer and Jörn Schrieber},   year = {2023},   note = {R package version 0.14-6},   url = {https://CRAN.R-project.org/package=transport}, }"},{"path":"/index.html","id":"transport","dir":"","previous_headings":"","what":"Computation of Optimal Transport Plans and Wasserstein Distances","title":"Computation of Optimal Transport Plans and Wasserstein Distances","text":"goal transport solve optimal transport problems. compute Wasserstein distances (.k.. Kantorovitch, Fortet–Mourier, Mallows, Earth Mover’s, minimal L_p distances), return corresponding transference plans, display graphically. Objects can compared include grey-scale images, (weighted) point patterns, mass vectors.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Computation of Optimal Transport Plans and Wasserstein Distances","text":"can install development version transport visiting original github package - https://github.com/cran/transport. Otherwise can clone repository run locally!","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Computation of Optimal Transport Plans and Wasserstein Distances","text":"basic example shows solve common problem: {r example} # # example default method # <- c(100, 200, 80, 150, 50, 140, 170, 30, 10, 70) b <- c(60, 120, 150, 110, 40, 90, 160, 120, 70, 80) set.seed(24) costm <- matrix(sample(1:20, 100, replace=TRUE), 10, 10) costm res <- transport(,b,costm) res","code":""},{"path":"/index.html","id":"changes-to-layout","dir":"","previous_headings":"","what":"Changes to layout","title":"Computation of Optimal Transport Plans and Wasserstein Distances","text":"Navigation Bar added template changed using bootstrap bootswatch links license community citation authors dev color background also changed using bslib Footnotes also added","code":""},{"path":"/index.html","id":"website-deployed-at","dir":"","previous_headings":"","what":"Website deployed at","title":"Computation of Optimal Transport Plans and Wasserstein Distances","text":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-achatto4/","code":""},{"path":"/index.html","id":"list-of-exported-functions","dir":"","previous_headings":"","what":"List of exported functions","title":"Computation of Optimal Transport Plans and Wasserstein Distances","text":"transport-package - Solve optimal transport problems. Compute Wasserstein distances (.k.. Kantorovitch, Fortet–Mourier, Mallows, Earth Mover’s, minimal Lp distances), return corresponding transport plans, display graphically. Objects can compared include grey-scale images, (weighted) point patterns, mass vectors. aha - Solve transportation problem Aurenhammer–Hoffmann–Aronov Method .equal (transport objects) - Methods judging near equality objects class pgrid pp wpp compatible - Test whether two objects class ‘similar shape’ function transport can applied. matimage - simple wrapper image function convenient syntax plotting matrices “right way round” pixel images methods - Prints brief description pixel grid point pattern. pgrid - Construct object class “pgrid” matrix higher-dimensional array. pgrid-object - class “pgrid” (pixel grid) represents regular quantizations measures (bounded subsets ) Rd. Currently square quantizations measures rectangles supported, 2-d can thought grey scale images. plot - Methods plotting objects class pgrid, pp wpp, possibly together transference plan semidiscrete1 - Computes weight vector Apollonius diagram describing semidiscrete optimal transport plan Euclidean distance cost function associated Wasserstein distance. subwasserstein - Samples S elements source target measure computes Wasserstein distance samples. mean distance K tries returned. transport - Given two objects b specify distributions mass object specifies (way compute) costs, find transport plan going b minimizes total cost. wasserstein - Given two objects b specify measures Rd, compute Wasserstein distance order p objects. wasserstein1d - Given two vectors b, compute Wasserstein distance order p empirical distributions. wpp - Construct object class “wpp” matrix points vector masses. wpp-object - class “wpp” represents discrete measures positive mass finitely many locations.","code":""},{"path":"/reference/aha.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve Transportation Problem by Aurenhammer--Hoffmann--Aronov Method — aha","title":"Solve Transportation Problem by Aurenhammer--Hoffmann--Aronov Method — aha","text":"Solve transportation problem Aurenhammer--Hoffmann--Aronov Method.","code":""},{"path":"/reference/aha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve Transportation Problem by Aurenhammer--Hoffmann--Aronov Method — aha","text":"","code":"aha(a, b, nscales = 1, scmult = 2, factr = 1e+05, maxit = 10000, powerdiag=FALSE,     wasser = FALSE, wasser.spt = NA, approx=FALSE, ...) transport_apply(a, tplan) transport_error(a, b, tplan)"},{"path":"/reference/aha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve Transportation Problem by Aurenhammer--Hoffmann--Aronov Method — aha","text":"\\(m \\times n\\) matrix. treated measure \\([0,m] \\times [0,n]\\) constant density unit square \\([,+1) \\times [j,j+1)\\). b either matrix dim()==dim(b) sum()==sum(b) data frame three variables named x, y mass sum()==sum(b$mass),     representing discrete measure \\([0,m]) \\times [0,n]\\). tplan transference plan (b), typically optimal transference plan obtained call aha. nscales, scmult number scales use multiscale approach (default \\(1\\) meaning multiscale approach), factor     number pixels dimension multiplied get coarser next finer scale. factr, maxit parameters passed underlying L-BFGS-B algorithm (via argument control R-function optim). powerdiag logical. Instead optimal transference plan, parameters optimal power diagram returned? wasser logical. Instead optimal transference plan, \\(L_2\\)-Wasserstein-distance b returned? wasser.spt number support points used approximate discrete measure b. Defaults NA meaning full set support   \tpoints b used. argument NA, wasser set TRUE. approx logical. TRUE, approximation objective function used optimization. ... arguments passed optim via argument control.","code":""},{"path":"/reference/aha.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solve Transportation Problem by Aurenhammer--Hoffmann--Aronov Method — aha","text":"function aha implements algorithm Aurenhammer, Hoffmann Aronov (1998) finding optimal transference plans terms   squared Euclidean distance two dimensions. follows detailed description given Mérigot (2011) also implements   multiscale version presented latter paper. functions transport_apply transport_error serve checking accuracy transference plan obtained aha.   Since transference plan obtained continuous optimization transport exactly measure b, measure   transport_apply(, tplan). transport_error(, b, tplan) sum absolut errors transported -measure b-measure obtained.","code":""},{"path":"/reference/aha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve Transportation Problem by Aurenhammer--Hoffmann--Aronov Method — aha","text":"powerdiag wasser FALSE, data frame columns , mass, specify knot knot amount mass sent optimal transference plan. Knots given indices terms usual column major enumeration matrices b. plot methods classes pgrid pp, can plot solution. powerdiag TRUE wasser FALSE, list components xi, eta, w rect, specify parameters optimal power diagram format needed function power_diagram. Note rect always c(0,m,0,n). Since version 0.10-0 list component wasser.dist containing Wasserstein distance. wasser TRUE, data frame columns wasser.dist error.bound length one, error.bound gives bound absolute error Wasserstein distance due approximating measure b measure smaller number support points.","code":""},{"path":"/reference/aha.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Solve Transportation Problem by Aurenhammer--Hoffmann--Aronov Method — aha","text":"F. Aurenhammer, F. Hoffmann B. Aronov (1998). Minkowski-type theorems least-squares clustering. Algorithmica 20(1), 61--76. Q. Mérigot (2011). multiscale approach optimal transport. Eurographics Symposium Geometry Processing 30(5), 1583--1592.","code":""},{"path":"/reference/aha.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Solve Transportation Problem by Aurenhammer--Hoffmann--Aronov Method — aha","text":"Björn Bähre bjobae@gmail.com    (slightly modified Dominic Schuhmacher dschuhm1@uni-goettingen.de)","code":""},{"path":[]},{"path":"/reference/aha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Solve Transportation Problem by Aurenhammer--Hoffmann--Aronov Method — aha","text":"","code":"res <- aha(random32a$mass, random32b$mass) plot(random32a, random32b, res, lwd=0.75)   aha(random64a$mass, random64b$mass, nscales=3, scmult=5, wasser.spt=512, approx=TRUE) #>   wasser.dist error.bound #> 1    13.17158    1.161478"},{"path":"/reference/all.equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for Judging Near Equality of Objects of Class pgrid, pp or wpp — all.equal (transport objects)","title":"Methods for Judging Near Equality of Objects of Class pgrid, pp or wpp — all.equal (transport objects)","text":"Methods judging near equality objects class pgrid pp wpp","code":""},{"path":"/reference/all.equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for Judging Near Equality of Objects of Class pgrid, pp or wpp — all.equal (transport objects)","text":"","code":"# S3 method for pgrid all.equal(target, current, ...) # S3 method for pp all.equal(target, current, ...) # S3 method for wpp all.equal(target, current, ...)"},{"path":"/reference/all.equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for Judging Near Equality of Objects of Class pgrid, pp or wpp — all.equal (transport objects)","text":"target, current objects class compared. ... currently without effect.","code":""},{"path":"/reference/all.equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for Judging Near Equality of Objects of Class pgrid, pp or wpp — all.equal (transport objects)","text":"Either TRUE vector mode  “character” describing differences target current.","code":""},{"path":"/reference/all.equal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods for Judging Near Equality of Objects of Class pgrid, pp or wpp — all.equal (transport objects)","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de","code":""},{"path":[]},{"path":"/reference/compatible.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether Two Objects are Compatible — compatible","title":"Test whether Two Objects are Compatible — compatible","text":"Test whether two objects class ‘similar shape’   function transport can applied.","code":""},{"path":"/reference/compatible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether Two Objects are Compatible — compatible","text":"","code":"compatible(target, current, ...) # S3 method for pgrid compatible(target, current, ...) # S3 method for pp compatible(target, current, ...) # S3 method for wpp compatible(target, current, ...)"},{"path":"/reference/compatible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether Two Objects are Compatible — compatible","text":"target, current objects class compared. ... currently without effect.","code":""},{"path":"/reference/compatible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether Two Objects are Compatible — compatible","text":"Logical.","code":""},{"path":"/reference/compatible.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Test whether Two Objects are Compatible — compatible","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de","code":""},{"path":[]},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/matimage.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting Matrices as Images — matimage","title":"Plotting Matrices as Images — matimage","text":"simple wrapper image function convenient syntax plotting  matrices \"right way round\" pixel images.","code":""},{"path":"/reference/matimage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting Matrices as Images — matimage","text":"","code":"matimage(z, x = 1:dim(z)[1], y = 1:dim(z)[2], rot = TRUE, asp = 1, ...)"},{"path":"/reference/matimage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting Matrices as Images — matimage","text":"z numeric matrix. x, y (optional) coordinates pixels. rot logical. Whether plot matrix \"right way round\" pixel position image corresponds pixel position matrix obtained print. asp aspect ratio parameter image. ... parameters passed image.","code":""},{"path":"/reference/matimage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting Matrices as Images — matimage","text":"Nothing (invisible NULL).","code":""},{"path":"/reference/matimage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting Matrices as Images — matimage","text":"","code":"m <- matrix(1:36,6,6) image(z=m, col = heat.colors(36))  matimage(m, col = heat.colors(36))"},{"path":"/reference/methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Print and Summary Methods for Objects of Class pgrid, pp and wpp — methods","title":"Print and Summary Methods for Objects of Class pgrid, pp and wpp — methods","text":"Prints brief description pixel grid point pattern.","code":""},{"path":"/reference/methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print and Summary Methods for Objects of Class pgrid, pp and wpp — methods","text":"","code":"# S3 method for pgrid print(x, ...) # S3 method for pp print(x, ...) # S3 method for wpp print(x, ...) # S3 method for pgrid summary(object, ...) # S3 method for pp summary(object, ...) # S3 method for wpp summary(object, ...)"},{"path":"/reference/methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print and Summary Methods for Objects of Class pgrid, pp and wpp — methods","text":"x, object object class pgrid pp wpp. ... additional arguments. Currently without effect.","code":""},{"path":"/reference/methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print and Summary Methods for Objects of Class pgrid, pp and wpp — methods","text":"Currently difference print summary.","code":""},{"path":"/reference/methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print and Summary Methods for Objects of Class pgrid, pp and wpp — methods","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de    Timo Wilm timo.wilm@stud.uni-goettingen.de","code":""},{"path":"/reference/pgrid-object.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Pixel Grids — pgrid-object","title":"Class of Pixel Grids — pgrid-object","text":"class \"pgrid\" (pixel grid) represents regular quantizations measures   (bounded subsets ) \\(R^d\\). Currently square quantizations measures rectangles   supported, 2-d can thought grey scale images.","code":""},{"path":"/reference/pgrid-object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class of Pixel Grids — pgrid-object","text":"Objects class \"pgrid\" can created function    pgrid, commonly used input function   transport. methods plot, print   summary class. object class \"pgrid\" contains following elements:","code":""},{"path":"/reference/pgrid-object.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class of Pixel Grids — pgrid-object","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de","code":""},{"path":[]},{"path":"/reference/pgrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the pgrid Class — pgrid","title":"Constructor for the pgrid Class — pgrid","text":"Construct object class \"pgrid\" matrix higher-dimensional array.","code":""},{"path":"/reference/pgrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the pgrid Class — pgrid","text":"","code":"pgrid(mass, boundary, gridtriple, generator, structure)"},{"path":"/reference/pgrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the pgrid Class — pgrid","text":"mass matrix higher-dimensional array specifing masses pixel / pixel centre. boundary, gridtriple, generator arguments specifying positions pixels. one can specified. structure optional character string specifying structure grid.     Currently \"square\" \"rectangular\" make sense, derrived automatically     dimensions mass.","code":""},{"path":"/reference/pgrid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for the pgrid Class — pgrid","text":"detailed explanations arguments components derived object class \"pgrid\", see    pgrid-object.","code":""},{"path":"/reference/pgrid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructor for the pgrid Class — pgrid","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de","code":""},{"path":[]},{"path":"/reference/pgrid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for the pgrid Class — pgrid","text":"","code":"m <- matrix(1:20, 4, 5) a <- pgrid(m) print(a) #> Regularly spaced 4x5 pixel grid on [0,1] x [0,1.25]. #> x-gridtriple: 0.125 0.875 0.25  #> y-gridtriple: 0.125 1.125 0.25  #> pixel masses range from 1 to 20 #> total pixel mass: 210 #> total continuum mass: 13.125 print.default(a) #> $structure #> [1] \"square\" #>  #> $dimension #> [1] 2 #>  #> $n #> [1] 4 5 #>  #> $N #> [1] 20 #>  #> $boundary #> [1] 0.00 1.00 0.00 1.25 #>  #> $gridtriple #>       [,1]  [,2] [,3] #> [1,] 0.125 0.875 0.25 #> [2,] 0.125 1.125 0.25 #>  #> $generator #> $generator[[1]] #> [1] 0.125 0.375 0.625 0.875 #>  #> $generator[[2]] #> [1] 0.125 0.375 0.625 0.875 1.125 #>  #>  #> $mass #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    5    9   13   17 #> [2,]    2    6   10   14   18 #> [3,]    3    7   11   15   19 #> [4,]    4    8   12   16   20 #>  #> $totmass #> [1] 210 #>  #> $totcontmass #> [1] 13.125 #>  #> attr(,\"class\") #> [1] \"pgrid\"  if (FALSE) {     plot(a, rot=TRUE)}"},{"path":"/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for Plotting Objects of Class pgrid, pp and wpp — plot","title":"Methods for Plotting Objects of Class pgrid, pp and wpp — plot","text":"Methods plotting objects class pgrid, pp wpp,     possibly together transference plan.","code":""},{"path":"/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for Plotting Objects of Class pgrid, pp and wpp — plot","text":"","code":"# S3 method for pgrid plot(x, y = NULL, tplan = NULL, mass = c(\"colour\", \"thickness\"),     length = 0.1, angle = 5, acol, bcol = 4, pcol=\"goldenrod2\", lwd, pmass=TRUE,     rot = FALSE, overlay = FALSE, static.mass =TRUE, ...)   # S3 method for pp plot(x, y = NULL, tplan = NULL, cols = c(4, 2), cex = 0.8,     acol = grey(0.3), lwd = 1, overlay = TRUE, ...)   # S3 method for wpp plot(x, y = NULL, tplan = NULL, pmass=TRUE, tmass=TRUE, cols = c(4, 2),     cex = 0.8, aglevel = 0.4, acol = grey(0.3), lwd = 1, overlay = TRUE, ...)"},{"path":"/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for Plotting Objects of Class pgrid, pp and wpp — plot","text":"x,y one two objects class pgrid class pp plotted. tplan transference plan two objects x y,     typically optimal transference plan obtained call transport. mass, pmass, tmass pgrid objects tplan:     mass == \"colour\", mass transferred depicted heatmap colours;     mass == \"thickness\", depicted line widths arrows.     wpp objects:     pmass, tmass logicals controlling whether amount mass     associated points mass transferred depicted     plot. length length arrow heads inches. aglevel wpp objects tmass = TRUE: grey level   \tchosen depicting transport average amount mass. acol colour arrows/lines transference plan. Ignored pgrid     objects mass = \"colour\" wpp objects tmass     TRUE. angle angle arrow head. bcol colour cell boundaries semidiscrete transport plan. Ignored     instances. pcol colour points representing discrete masses semidiscrete     transport plan. Ignored instances. cols pp objects:     vector size 2 specifying colours two pp objects. cex,lwd,... graphic parameters used plot. Note pgrid objects   \tacol ignored mass == \"colour\", lwd ignored   \tmass == \"thickness\". Setting parameters optional. rot logical. Whether mass matrices pgrid objects rotated calling   \timage orientation ploted pixelgrid orientation   \tmass matrix . Otherwise plotting follows usual convention   \timage. overlay case two objects x y whether plotted top   \tone another (pgrid objects difference x-y plotted) .   \tpresence transference plan overlay forced true. static.mass transference plan explicitly lists “static mass transports” (.e.   \tmass stays site), transports also plotted disks   \tcolours/sizes corresponding amount mass stays?   \tNote wrong assume optimal transference plan obtained one   \talgorithms automatically list static mass transports.   \tcase \\(p=1\\), static mass transport site \\(\\) trivially equal   \tminimum source mass target mass, currently case   \tresults obtained method=\"aha\".","code":""},{"path":"/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for Plotting Objects of Class pgrid, pp and wpp — plot","text":"Used side effect.","code":""},{"path":"/reference/plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods for Plotting Objects of Class pgrid, pp and wpp — plot","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de","code":""},{"path":"/reference/plot.ubtrans.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Unbalanced Transport Information — plot.ubtrans","title":"Plot Unbalanced Transport Information — plot.ubtrans","text":"Graphic representation components list returned unbalanced.","code":""},{"path":"/reference/plot.ubtrans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Unbalanced Transport Information — plot.ubtrans","text":"","code":"# S3 method for ubtrans plot(x, what = c(\"plan\", \"extra\", \"trans\", \"inplace\"), axes = FALSE, ...)"},{"path":"/reference/plot.ubtrans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Unbalanced Transport Information — plot.ubtrans","text":"x list returned unbalanced option output=\"\". character. aspect unbalanced transport information display. axes logical. Whether plot axes (ignored =\"plan\"). ... graphics parameters passed plot.pgrid  =\"plan\" passed matimage cases.","code":""},{"path":"/reference/plot.ubtrans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Unbalanced Transport Information — plot.ubtrans","text":"Nothing. Used side effect.","code":""},{"path":"/reference/plot.ubtrans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Unbalanced Transport Information — plot.ubtrans","text":"","code":"if (FALSE) { res <- unbalanced( random32a, random32b, p=1, C=0.2, output=\"all\" ) plot( res, what=\"plan\", lwd=1.5, angle=20 ) plot( res, what=\"trans\" ) plot( res, what=\"extra\" ) plot( res, what=\"inplace\" )}"},{"path":"/reference/plot_apollonius.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Apollonius Diagram — plot_apollonius","title":"Plot Apollonius Diagram — plot_apollonius","text":"Plots Apollonius diagram, .k.. (additively) weighted Voronoi diagram, based matrix points (centers) 2d weights.","code":""},{"path":"/reference/plot_apollonius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Apollonius Diagram — plot_apollonius","text":"","code":"plot_apollonius(   points,   weights,   show_points = TRUE,   show_weights = TRUE,   add_to_weights = 0,   add = FALSE,   col = 4,   lwd = 1.5,   ... )"},{"path":"/reference/plot_apollonius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Apollonius Diagram — plot_apollonius","text":"points two-column matrix containing 2d points. weights vector weights points. show_points Logical. points displayed plot? Defaults TRUE. show_weights Logical. weights displayed plot? Defaults TRUE. add_to_weights value added weights make plot informative. add Logical. plot added current device? Defaults FALSE. col colour cell boundaries. lwd line width cell boundaries. ... parameters base plot add FALSE.","code":""},{"path":"/reference/plot_apollonius.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Apollonius Diagram — plot_apollonius","text":"points \\(x_1, \\ldots, x_n\\) weights \\(w_1, \\ldots, w_n\\) $$-th cell Apollonius diagram contains points x satisfy $$\\|x-x_i\\|-w_i < \\|x-x_j\\|-w_j$$   \\(j \\neq \\). boundaries hyperbola segments. show_weights TRUE, grey circles radii weights + add_to_weights plotted around points. Negative radii set zero.","code":""},{"path":"/reference/plot_apollonius.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot Apollonius Diagram — plot_apollonius","text":"function requires Computational Geometry Algorithms Library (CGAL),       available https://www.cgal.org. Adapt file src/Makevars according       instructions given re-install source.","code":""},{"path":"/reference/plot_apollonius.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot Apollonius Diagram — plot_apollonius","text":"Menelaos Karavelas Mariette Yvinec. 2D Apollonius Graphs              (Delaunay Graphs Disks). CGAL User Reference Manual.             CGAL Editorial Board, 4.12 edition, 2018","code":""},{"path":"/reference/plot_apollonius.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Apollonius Diagram — plot_apollonius","text":"Valentin Hartmann valentin.hartmann@epfl.ch (code)         Dominic Schuhmacher schuhmacher@math.uni-goettingen.de (R-port)","code":""},{"path":"/reference/plot_apollonius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Apollonius Diagram — plot_apollonius","text":"","code":"if (FALSE) { w <- c(0.731, 0.0372, 0.618, 0.113, 0.395, 0.222, 0.124, 0.101, 0.328, 0) points <- matrix(runif(20), 10, 2) plot_apollonius(points, w, add_to_weights = -0.1)}"},{"path":"/reference/power_diagram.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Power Diagram of Weighted Sites in 2-Dimensional Space — power_diagram","title":"Compute the Power Diagram of Weighted Sites in 2-Dimensional Space — power_diagram","text":"Compute power diagram weighted sites 2-dimensional space.","code":""},{"path":"/reference/power_diagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Power Diagram of Weighted Sites in 2-Dimensional Space — power_diagram","text":"","code":"power_diagram(xi, eta, w, rect = NA) # S3 method for power_diagram plot(x, weights=FALSE, add=FALSE, col=4, lwd=1.5, ...)"},{"path":"/reference/power_diagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Power Diagram of Weighted Sites in 2-Dimensional Space — power_diagram","text":"xi,eta,w vectors equal length, xi, eta coordinates sites w corresponding weights. rect vetor length 4. get finite representation power diagram, intersected rectangle      \\([rect[1],rect[2]] \\times [rect[3],rect[4]]\\). Defaults c(min(xi),max(xi),min(eta),max(eta)). x power diagram returned power_diagram. weights logical. TRUE, weights non-redundant sites non-negative weight represented circles whose radii     equal square roots corresponding weights. add logical. power diagram plotted top current graphics? col color cell boundaries. lwd, ... arguments graphic parameters used plot.default.","code":""},{"path":"/reference/power_diagram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Power Diagram of Weighted Sites in 2-Dimensional Space — power_diagram","text":"function power_diagram implements algorithm Edelsbrunner Shah (1996) computes    regular triangulations thus dual representation, power diagram. point location, algorithm    devised Devillers (2002) used.","code":""},{"path":"/reference/power_diagram.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Power Diagram of Weighted Sites in 2-Dimensional Space — power_diagram","text":"H. Edelsbrunner, N. R. Shah (1996), Incremental Topological Flipping Works Regular Triangulations, Algorithmica 15, 223--241. O. Devillers (2002), Delaunay Hierarchy, International Journal Foundations Computer Science 13, 163--180.","code":""},{"path":"/reference/power_diagram.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the Power Diagram of Weighted Sites in 2-Dimensional Space — power_diagram","text":"Björn Bähre bjobae@gmail.com    (slightly modified Dominic Schuhmacher dschuhm1@uni-goettingen.de)","code":""},{"path":"/reference/power_diagram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Power Diagram of Weighted Sites in 2-Dimensional Space — power_diagram","text":"","code":"xi <- runif(100)     eta <- runif(100)     w <- runif(100,0,0.005)     x <- power_diagram(xi,eta,w,rect=c(0,1,0,1))     plot(x,weights=TRUE)"},{"path":"/reference/pp-object.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of (Unweighted) Point Patterns — pp-object","title":"Class of (Unweighted) Point Patterns — pp-object","text":"class \"pp\" represents discrete measures fixed mass finitely many locations.","code":""},{"path":"/reference/pp-object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class of (Unweighted) Point Patterns — pp-object","text":"Objects class \"pp\" may created function    pp, commonly used input function   transport. methods plot, print   summary class. object class \"pp\" contains following elements:","code":""},{"path":"/reference/pp-object.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class of (Unweighted) Point Patterns — pp-object","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de","code":""},{"path":[]},{"path":"/reference/pp.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the pp Class — pp","title":"Constructor for the pp Class — pp","text":"Construct object class \"pp\" matrix.","code":""},{"path":"/reference/pp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the pp Class — pp","text":"","code":"pp(coordinates)"},{"path":"/reference/pp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the pp Class — pp","text":"coordinates matrix specifying coordinates points. row corresponds point.","code":""},{"path":"/reference/pp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for the pp Class — pp","text":"detailed explanations arguments components derived object class \"pp\", see    pp-object.","code":""},{"path":"/reference/pp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructor for the pp Class — pp","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de","code":""},{"path":[]},{"path":"/reference/pp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for the pp Class — pp","text":"","code":"m <- matrix(c(1,1,2,2,3,1,4,2),4,2) a <- pp(m) print(a) #> Pattern of 4 points in 2 dimensions. #> Minimal coordinates: 1 1  #> Maximal coordinates: 2 4  print.default(a) #> $dimension #> [1] 2 #>  #> $N #> [1] 4 #>  #> $coordinates #>      [,1] [,2] #> [1,]    1    3 #> [2,]    1    1 #> [3,]    2    4 #> [4,]    2    2 #>  #> attr(,\"class\") #> [1] \"pp\"  if (FALSE) {     plot(a)}"},{"path":"/reference/random.html","id":null,"dir":"Reference","previous_headings":"","what":"Images to Illustrate the Use of transport.pgrid — random","title":"Images to Illustrate the Use of transport.pgrid — random","text":"32 x 32, 64 x 64 128 x 128 images illustrate use transport.pgrid. objects  class \"pgrid\".","code":""},{"path":"/reference/random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Images to Illustrate the Use of transport.pgrid — random","text":"","code":"random32a  random32b  random64a  random64b  random128a  random128b"},{"path":"/reference/random.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Images to Illustrate the Use of transport.pgrid — random","text":"Objects class ‘pgrid’.","code":""},{"path":"/reference/random.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Images to Illustrate the Use of transport.pgrid — random","text":"Randomly generated using package RandomFields.","code":""},{"path":"/reference/ret_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Text Strings for lbfgs Return Codes — ret_message","title":"Return Text Strings for lbfgs Return Codes — ret_message","text":"Given vector return codes, give back corresponding vector  return strings lbfgs library. Nonexistant codes ignored.","code":""},{"path":"/reference/ret_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Text Strings for lbfgs Return Codes — ret_message","text":"","code":"ret_message(n = NULL)"},{"path":"/reference/ret_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return Text Strings for lbfgs Return Codes — ret_message","text":"n vector return codes NULL meaning whole list shall returned.","code":""},{"path":"/reference/ret_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Text Strings for lbfgs Return Codes — ret_message","text":"named character vector corresponding return strings.","code":""},{"path":"/reference/ret_message.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Return Text Strings for lbfgs Return Codes — ret_message","text":"Code 0 ignored, since technical reasons never returned       function semidiscrete1.","code":""},{"path":[]},{"path":"/reference/ret_message.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return Text Strings for lbfgs Return Codes — ret_message","text":"Dominic Schuhmacher schuhmacher@math.uni-goettingen.de","code":""},{"path":"/reference/ret_message.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return Text Strings for lbfgs Return Codes — ret_message","text":"","code":"ret_message() #>                                    1                                    2  #>                         \"LBFGS_STOP\"            \"LBFGS_ALREADY_MINIMIZED\"  #>                                -1024                                -1023  #>              \"LBFGSERR_UNKNOWNERROR\"                \"LBFGSERR_LOGICERROR\"  #>                                -1022                                -1021  #>               \"LBFGSERR_OUTOFMEMORY\"                  \"LBFGSERR_CANCELED\"  #>                                -1020                                -1019  #>                 \"LBFGSERR_INVALID_N\"             \"LBFGSERR_INVALID_N_SSE\"  #>                                -1018                                -1017  #>             \"LBFGSERR_INVALID_X_SSE\"           \"LBFGSERR_INVALID_EPSILON\"  #>                                -1016                                -1015  #>        \"LBFGSERR_INVALID_TESTPERIOD\"             \"LBFGSERR_INVALID_DELTA\"  #>                                -1014                                -1013  #>        \"LBFGSERR_INVALID_LINESEARCH\"           \"LBFGSERR_INVALID_MINSTEP\"  #>                                -1012                                -1011  #>           \"LBFGSERR_INVALID_MAXSTEP\"              \"LBFGSERR_INVALID_FTOL\"  #>                                -1010                                -1009  #>             \"LBFGSERR_INVALID_WOLFE\"              \"LBFGSERR_INVALID_GTOL\"  #>                                -1008                                -1007  #>              \"LBFGSERR_INVALID_XTOL\"     \"LBFGSERR_INVALID_MAXLINESEARCH\"  #>                                -1006                                -1005  #>       \"LBFGSERR_INVALID_ORTHANTWISE\" \"LBFGSERR_INVALID_ORTHANTWISE_START\"  #>                                -1004                                -1003  #>   \"LBFGSERR_INVALID_ORTHANTWISE_END\"             \"LBFGSERR_OUTOFINTERVAL\"  #>                                -1002                                -1001  #>         \"LBFGSERR_INCORRECT_TMINMAX\"            \"LBFGSERR_ROUNDING_ERROR\"  #>                                -1000                                 -999  #>               \"LBFGSERR_MINIMUMSTEP\"               \"LBFGSERR_MAXIMUMSTEP\"  #>                                 -998                                 -997  #>         \"LBFGSERR_MAXIMUMLINESEARCH\"          \"LBFGSERR_MAXIMUMITERATION\"  #>                                 -996                                 -995  #>             \"LBFGSERR_WIDTHTOOSMALL\"         \"LBFGSERR_INVALIDPARAMETERS\"  #>                                 -994  #>          \"LBFGSERR_INCREASEGRADIENT\"  ret_message(c(2,-1023,-1019)) #>                         2                     -1023                     -1019  #> \"LBFGS_ALREADY_MINIMIZED\"     \"LBFGSERR_LOGICERROR\"  \"LBFGSERR_INVALID_N_SSE\""},{"path":"/reference/semidiscrete.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Optimal Transport Partition Between pgrid and wpp. — semidiscrete","title":"Find Optimal Transport Partition Between pgrid and wpp. — semidiscrete","text":"Given object class pgrid specifying image object b   class wpp specifiying flexible mass distribution finitely many points,   find partition image (hence optimal transport map) minimizes total transport cost   going b.","code":""},{"path":"/reference/semidiscrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Optimal Transport Partition Between pgrid and wpp. — semidiscrete","text":"","code":"semidiscrete(a, b, p = 2, method = c(\"aha\"), control = list(), ...)"},{"path":"/reference/semidiscrete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Optimal Transport Partition Between pgrid and wpp. — semidiscrete","text":"object class pgrid usually representing image discretization measure. b object class wpp usually total mass . p power \\(\\geq 1\\) Euclidean distance points taken order     compute costs. \\(p \\\\{1,2\\}\\) implemented. method name algorithm use. Currently aha supported. control named list parameters chosen method result call trcontrol. Currently   \tparameters factr maxit can set. ... currently without effect.","code":""},{"path":"/reference/semidiscrete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Optimal Transport Partition Between pgrid and wpp. — semidiscrete","text":"wrapper functions aha semidiscrete1. former   Aurenhammer--Hoffmann--Aronov (1998) method \\(p=2\\) implemented multiscale variant presented   Mérigot (2011). latter adapted Aurenhammer--Hoffmann--Aronov method \\(p=1\\) used   presented Hartmann Schuhmacher (2018). present function automatically called transport   first argument class pgrid second argument class wpp.","code":""},{"path":"/reference/semidiscrete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Optimal Transport Partition Between pgrid and wpp. — semidiscrete","text":"object describing optimal transport partition b. p=1 object class apollonius_diagram components sites weights,   well (optionally) wasserstein_dist ret_code (return code call  semidiscrete1). p=2 objectof class power_diagram components sites cells,   well (optionally) wasserstein_dist. sites data.frame columns xi,  eta w (weights power diagram). cells list many   2-column matrix components sites, describing \\(x\\)- \\(y\\)-coordinates   polygonal cell associated corresponding site NULL cell site empty. Plotting methods exist objects class apollonius_diagram, power_diagram   optimal transport maps represented either two.","code":""},{"path":"/reference/semidiscrete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find Optimal Transport Partition Between pgrid and wpp. — semidiscrete","text":"F. Aurenhammer, F. Hoffmann B. Aronov (1998). Minkowski-type theorems least-squares clustering. Algorithmica 20(1), 61--76. V. Hartmann D. Schuhmacher (2017). Semi-discrete optimal transport --- case p=1. Preprint arXiv:1706.07650 M. Karavelas M. Yvinec. 2D Apollonius Graphs  (Delaunay Graphs Disks). CGAL User Reference Manual. CGAL Editorial Board, 4.12 edition, 2018 Q. Mérigot (2011). multiscale approach optimal transport. Computer Graphics Forum 30(5), 1583--1592. doi: 10.1111/j.1467-8659.2011.02032.x Naoaki Okazaki (2010). libLBFGS: library Limited-memory Broyden-Fletcher-Goldfarb-Shanno (L-BFGS). Version 1.10","code":""},{"path":"/reference/semidiscrete.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find Optimal Transport Partition Between pgrid and wpp. — semidiscrete","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de      Björn Bähre bjobae@gmail.com      Valentin Hartmann valentin.hartmann@epfl.ch","code":""},{"path":"/reference/semidiscrete.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Find Optimal Transport Partition Between pgrid and wpp. — semidiscrete","text":"p=1 function requires Computational Geometry Algorithms Library (CGAL), available https://www.cgal.org. Adapt file src/Makevars according instructions given re-install source. Internally code liblbfgs 1.10 Naoaki Okazaki (2010) used.","code":""},{"path":[]},{"path":"/reference/semidiscrete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Optimal Transport Partition Between pgrid and wpp. — semidiscrete","text":"","code":"##  See examples for function transport"},{"path":"/reference/semidiscrete1.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Semidiscrete Optimal Transport for Euclidean Distance Cost — semidiscrete1","title":"Compute Semidiscrete Optimal Transport for Euclidean Distance Cost — semidiscrete1","text":"Computes weight vector Apollonius diagram describing semidiscrete optimal transport plan Euclidean distance cost function associated Wasserstein distance.","code":""},{"path":"/reference/semidiscrete1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Semidiscrete Optimal Transport for Euclidean Distance Cost — semidiscrete1","text":"","code":"semidiscrete1(   source,   target,   xrange = c(0, 1),   yrange = c(0, 1),   verbose = FALSE,   reg = 0 )"},{"path":"/reference/semidiscrete1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Semidiscrete Optimal Transport for Euclidean Distance Cost — semidiscrete1","text":"source matrix specifing source measure. target three-column matrix specifing target measure form x-coordinate, y-coordinate, mass. xrange, yrange Vectors two components defining window  source measure lives. Defaults \\([0,1] \\times [0,1]\\). source interpreted image equally sized quadratic pixels window. verbose Logical. Shall information multiscale progress L-BFGS return codes printed? reg non-negative regularization parameter. usually necessary deviate default 0.","code":""},{"path":"/reference/semidiscrete1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Semidiscrete Optimal Transport for Euclidean Distance Cost — semidiscrete1","text":"list describing solution. components weights vector length equal first dimension target         containing weights Apollonius diagram discribing         optimal semidiscrete transport source target. wasserstein_dist \\(L_1\\)-Wasserstein distance source target. ret_code return code. Equal 1 everything OK, since code         interrupts usual lbfgs code. values can converted         corresponding return message using ret_message.","code":""},{"path":"/reference/semidiscrete1.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute Semidiscrete Optimal Transport for Euclidean Distance Cost — semidiscrete1","text":"function requires Computational Geometry Algorithms Library (CGAL),       available https://www.cgal.org. Adapt file src/Makevars according       instructions given re-install source. Internally code liblbfgs 1.10 Naoaki Okazaki (2010) used.       See http://www.chokkan.org/software/liblbfgs/. stand-alone version C++ code function available       https://github.com/valentin-hartmann-research/semi-discrete-transport.","code":""},{"path":"/reference/semidiscrete1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Semidiscrete Optimal Transport for Euclidean Distance Cost — semidiscrete1","text":"V. Hartmann D. Schuhmacher (2017).             Semi-discrete optimal transport --- case p=1.             Preprint arXiv:1706.07650 Menelaos Karavelas Mariette Yvinec. 2D Apollonius Graphs              (Delaunay Graphs Disks). CGAL User Reference Manual.             CGAL Editorial Board, 4.12 edition, 2018 Naoaki Okazaki (2010). libLBFGS: library Limited-memory             Broyden-Fletcher-Goldfarb-Shanno (L-BFGS). Version 1.10","code":""},{"path":[]},{"path":"/reference/semidiscrete1.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Semidiscrete Optimal Transport for Euclidean Distance Cost — semidiscrete1","text":"Valentin Hartmann valentin.hartmann@epfl.ch (stand-alone C++ code)         Dominic Schuhmacher schuhmacher@math.uni-goettingen.de (R-port)","code":""},{"path":"/reference/semidiscrete1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Semidiscrete Optimal Transport for Euclidean Distance Cost — semidiscrete1","text":"","code":"if (FALSE) { # the following function rotates a matrix m clockwise, so # that image(rococlock(m)) has the same orientation as print(m): roclock <- function(m) t(m)[, nrow(m):1]  set.seed(30) n <- 20 nu <- matrix(c(runif(2*n), rgamma(n,3,1)), n, 3) pixelbdry <- seq(0,1,length=33) image(pixelbdry, pixelbdry, roclock(random32a$mass), asp=1, col = grey(seq(0,1,length.out=32))) points(nu[,1], nu[,2], pch=16, cex=sqrt(nu[,3])/2, col=2)  res <- semidiscrete1(random32a$mass, nu) plot_apollonius(nu[,1:2], res$weights, show_weights = FALSE, add = TRUE) points(nu[,1], nu[,2], pch=16, cex=sqrt(nu[,3])/2, col=2)}"},{"path":"/reference/shielding.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Optimal Transport (Cost/Plan) Using the Multiscale Shielding Method — shielding","title":"Compute Optimal Transport (Cost/Plan) Using the Multiscale Shielding Method — shielding","text":"Runs multiscale version Shielding Method (.k.. Short Cut Method) computing optimal transport (cost/plan) rectangular grid \\(d\\) dimensions squared Euclidean distance cost function.","code":""},{"path":"/reference/shielding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Optimal Transport (Cost/Plan) Using the Multiscale Shielding Method — shielding","text":"","code":"shielding(   a,   b,   nscales = 2,   startscale = 1,   flood = 0,   measureScale = 1e-06,   verbose = FALSE,   basisKeep = 1,   basisRefine = 1 )"},{"path":"/reference/shielding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Optimal Transport (Cost/Plan) Using the Multiscale Shielding Method — shielding","text":", b arrays \\(d\\) coordinates representing source target measure, respectively. entries must positive. nscales number scales generated multiscale algorithm. startscale first scale problem solved. flood real number. positive, take maximum entry flood entry b. measureScale required precision entries. Computations performed round(/measureScale) b using integer arithmetics. verbose logical. Toggles output console progress algorithm. basisKeep, basisRefine internal use .","code":""},{"path":"/reference/shielding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Optimal Transport (Cost/Plan) Using the Multiscale Shielding Method — shielding","text":"list components err error code. 0 everything ok. a_used,b_used vectorized arrays actually used algorithm. , b                 applying flood measureScale. coupling vectorized coupling describing optimal transport a_used b_used basis matrix two columns describing basis obtained optimal transport u,v vectors optimal values dual problem","code":""},{"path":"/reference/shielding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Optimal Transport (Cost/Plan) Using the Multiscale Shielding Method — shielding","text":"b sum, normalized sum 1 flood measureScale transformations applied.","code":""},{"path":"/reference/shielding.html","id":"use-of-cplex","dir":"Reference","previous_headings":"","what":"Use of CPLEX","title":"Compute Optimal Transport (Cost/Plan) Using the Multiscale Shielding Method — shielding","text":"larger problems (thousands grid points) considerable speed improvements shielding can use CPLEX numerical solver underlying constrained optimization problems. local installation CPLEX available, transport package can linked installation. See file src/Makevars source package instructions.","code":""},{"path":"/reference/shielding.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Optimal Transport (Cost/Plan) Using the Multiscale Shielding Method — shielding","text":"B. Schmitzer (2016). sparse multiscale algorithm dense optimal transport. J. Math. Imaging Vision 56(2), 238--259. https://arxiv.org/abs/1510.05466","code":""},{"path":[]},{"path":"/reference/shielding.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Optimal Transport (Cost/Plan) Using the Multiscale Shielding Method — shielding","text":"Bernhard Schmitzer schmitzer@uni-muenster.de         Dominic Schuhmacher dschuhm1@uni-goettingen.de         (based C++ code Bernhard Schmitzer)","code":""},{"path":"/reference/shielding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Optimal Transport (Cost/Plan) Using the Multiscale Shielding Method — shielding","text":"","code":"if (FALSE) { shielding(random64a$mass,random64b$mass,nscales=6,measureScale=1) }"},{"path":"/reference/starting_solutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute starting solution for the transportation problem — starting solutions","title":"Compute starting solution for the transportation problem — starting solutions","text":"Compute feasible transference plan two mass vectors.","code":""},{"path":"/reference/starting_solutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute starting solution for the transportation problem — starting solutions","text":"","code":"northwestcorner(a, b) russell(a, b, costm)"},{"path":"/reference/starting_solutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute starting solution for the transportation problem — starting solutions","text":",b Two numeric vectors (typically containing natural numbers) length \\(m\\) \\(n\\), describing mass distributions. costm \\(m\\) \\(n\\) matrix costs moving one unit mass.","code":""},{"path":"/reference/starting_solutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute starting solution for the transportation problem — starting solutions","text":"list whose components \\(m\\) \\(n\\) matrices, viz. assignment containing \\((,j)\\)-th entry mass assigned origin \\(\\) destination \\(j\\); basis containing \\((,j)\\)-th entry \\(1\\) basic entry \\(0\\) otherwise.","code":""},{"path":"/reference/starting_solutions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute starting solution for the transportation problem — starting solutions","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de","code":""},{"path":"/reference/starting_solutions.html","id":"warnings","dir":"Reference","previous_headings":"","what":"Warnings","title":"Compute starting solution for the transportation problem — starting solutions","text":"current implementations R. Computations may slow larger vectors b. \tcomputed starting solution may degenerate, .e. may basic entries zero mass assigned.","code":""},{"path":[]},{"path":"/reference/subwasserstein.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate Computation of Wasserstein Distances via Subsampling. — subwasserstein","title":"Approximate Computation of Wasserstein Distances via Subsampling. — subwasserstein","text":"Samples S elements source target measure computes Wasserstein distance samples. mean distance K tries returned.","code":""},{"path":"/reference/subwasserstein.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate Computation of Wasserstein Distances via Subsampling. — subwasserstein","text":"","code":"subwasserstein(   source,   target,   S,   K = 1,   p = 1,   costM = NULL,   prob = TRUE,   precompute = FALSE,   method = \"networkflow\" )"},{"path":"/reference/subwasserstein.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate Computation of Wasserstein Distances via Subsampling. — subwasserstein","text":"source source measure either weight vector object one classes \"pgrid\", \"wpp\" \"pp\". target target measure needs type source measure. S sample size. K number tries. Defaults 1. p order Wasserstein metric (.e. power distances). Defaults 1. costM cost matrix source target measures. Ignored unless source target weight vectors. prob logical. objects , b interpreted probability measures, .e. total mass normalized 1? precompute logical. cost matrix large problem precomputed? method string name method used optimal transport distance computation. Options \"revsimplex\", \"shortsimplex\" \"primaldual\". Defaults \"revsimplex\".","code":""},{"path":"/reference/subwasserstein.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate Computation of Wasserstein Distances via Subsampling. — subwasserstein","text":"mean K values Wasserstein distances         subsampled measures.","code":""},{"path":"/reference/subwasserstein.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximate Computation of Wasserstein Distances via Subsampling. — subwasserstein","text":"larger problems setting precompute TRUE recommended.","code":""},{"path":"/reference/subwasserstein.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Approximate Computation of Wasserstein Distances via Subsampling. — subwasserstein","text":"M. Sommerfeld, J. Schrieber, Y. Zemel . Munk (2018)             Optimal Transport: Fast Probabilistic Approximation Exact Solvers             preprint: arXiv:1802.05570","code":""},{"path":"/reference/subwasserstein.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Approximate Computation of Wasserstein Distances via Subsampling. — subwasserstein","text":"Jörn Schrieber joern.schrieber-1@mathematik.uni-goettingen.de         Dominic Schuhmacher dominic.schuhmacher@mathematik.uni-goettingen.de","code":""},{"path":"/reference/subwasserstein.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate Computation of Wasserstein Distances via Subsampling. — subwasserstein","text":"","code":"if (FALSE) { subwasserstein(random64a, random64b, S=1000) wasserstein(random64a, random64b) }"},{"path":"/reference/transport-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Functions in Package ‘transport’ — transport-internal","title":"Internal Functions in Package ‘transport’ — transport-internal","text":"Internal functions package ‘transport’","code":""},{"path":"/reference/transport-internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Functions in Package ‘transport’ — transport-internal","text":"","code":"dedegenerate(basis) <!-- % Fix a degenerate starting solution for function transport. I.e. if the (m x n)-basis matrix has fewer --> <!-- % than the required m+n-1 ones add the missing number of ones in such a way that no cycle (loop) is  --> <!-- % generated  --> findblocks(tbasis) <!-- % finds the connected blocks in a basis matrix and returns them as list of lists of row and col indices --> <!-- % (loops indefinitely if not every row and every col contains at least one 1) --> fudge(temp, N = 1e+09) <!-- % transforms vectors with natural entries to vectors with natural entries of the fixed total mass N  --> <!-- % by randomly adding removing units of mass at entries that have positive mass --> gif.generate(M.save, M.source, M.target, K, file.name, fps, new.l,  gif_type,out.col= grey(0:1000/1000),width=800,height=800) <!-- % von transport_track aufgerufen --> image2(x, y, z, rot = FALSE, ...) image3(z, x=1:dim(z)[1], y=1:dim(z)[2], rot=TRUE, ...) <!-- % like image, but if rot=TRUE, matrices are plotted in the same orientation as they are written --> plot_pgrid_wpp(x, y, tplan, pmass=TRUE, cex=0.8, length=0.1, acol=\"#996699\",   bcol = 4, pcol = \"goldenrod2\", lwd = 1.5, rot = TRUE, ...) <!-- % internal plot function called by plot.pgrid if second argument is of class wpp --> <!-- % allows fine control over more graphics parameters --> refinesol(a1, b1, a2, b2, assig1, basis1, mult = 2) <!-- % for the multiscale approach. Computes a starting solution on the finer grid (finer by factor mult) --> <!-- % based on the solution given by assig1 and basis1 on the coarser grid --> triangulate(basis) <!-- % compute triangulation of m x n basis matrix -->"},{"path":"/reference/transport-internal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal Functions in Package ‘transport’ — transport-internal","text":"internal functions usually called directly user.   perform elementary tasks, little checks inputs,   may change one package version next without notice.   Also, functions exported, call   transport:::name_of_fun must.","code":""},{"path":"/reference/transport-internal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal Functions in Package ‘transport’ — transport-internal","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de    Florian Heinemann florian.heinemann@stud.uni-goettingen.de (gif.generate)","code":""},{"path":"/reference/transport-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal Transport in Various Forms — transport-package","title":"Optimal Transport in Various Forms — transport-package","text":"Solve optimal transport problems. Compute Wasserstein distances (.k.. Kantorovitch, Fortet--Mourier, Mallows, Earth Mover's, minimal \\(L_p\\) distances), return corresponding transport plans, display graphically. Objects can compared include grey-scale images, (weighted) point patterns, mass vectors.","code":""},{"path":"/reference/transport-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimal Transport in Various Forms — transport-package","text":"main end-user function transport. computes optimal transport plans images (class pgrid), point patterns (class pp), weighted point patterns (class wpp) mass vectors, based various algorithms. transport plans can ploted. function wasserstein allows numerical computation \\(p\\)-th order Wasserstein distances. functions package designed data two higher dimensions. quick tool computing \\(p\\)-th order Wasserstein distance univariate samples wasserstein1d.","code":""},{"path":"/reference/transport-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Optimal Transport in Various Forms — transport-package","text":"Dominic Schuhmacher schuhmacher@math.uni-goettingen.de Björn Bähre bjobae@gmail.com (code aha-method) Nicolas Bonneel nicolas.bonneel@liris.cnrs.fr  (adaptation LEMON code fast networkflow method) Carsten Gottschlich gottschlich@math.uni-goettingen.de  (original java code shortlist revsimplex methods) Valentin Hartmann valentin.hartmann@epfl.ch (code aha method p=1) Florian Heinemann florian.heinemann@uni-goettingen.de  (integration networkflow method) Bernhard Schmitzer schmitzer@uni-muenster.de (shielding method) Jörn Schrieber joern.schrieber-1@mathematik.uni-goettingen.de (subsampling method) Maintainer: Dominic Schuhmacher dominic.schuhmacher@mathematik.uni-goettingen.de","code":""},{"path":"/reference/transport-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimal Transport in Various Forms — transport-package","text":"See help page function transport.","code":""},{"path":"/reference/transport-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimal Transport in Various Forms — transport-package","text":"","code":"##  See examples for function transport"},{"path":"/reference/transport.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Optimal Transport Plan Between Two Objects — transport","title":"Find Optimal Transport Plan Between Two Objects — transport","text":"Given two objects b specify distributions mass object specifies (way compute) costs,   find transport plan going b minimizes total cost.","code":""},{"path":"/reference/transport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Optimal Transport Plan Between Two Objects — transport","text":"","code":"transport(a, b, ...) # S3 method for default transport(a, b, costm, method = c(\"networkflow\", \"shortsimplex\", \"revsimplex\", \"primaldual\"), fullreturn=FALSE, control = list(), threads=1, ...) # S3 method for pgrid transport(a, b, p = NULL, method = c(\"auto\", \"networkflow\", \"revsimplex\", \"shortsimplex\",   \"shielding\", \"aha\", \"primaldual\"), fullreturn=FALSE,   control = list(), threads=1,...) # S3 method for pp transport(a, b, p = 1, method = c(\"auction\", \"auctionbf\", \"networkflow\", \"shortsimplex\",   \"revsimplex\", \"primaldual\"), fullreturn=FALSE, control = list(), threads=1, ...) # S3 method for wpp transport(a, b, p = 1, method = c(\"networkflow\", \"revsimplex\", \"shortsimplex\",   \"primaldual\"), fullreturn=FALSE, control = list(), threads=1, ...)"},{"path":"/reference/transport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Optimal Transport Plan Between Two Objects — transport","text":", b two objects describe mass distributions, optimal transport map computed. default     method vectors non-negative values. three methods objects respective classes.     also possible class pgrid b class wpp. costm default method length() length(b) matrix specifying cost transporting single     units mass corresponding source destination points. p three specialized methods power \\(\\geq 1\\) Euclidean distance points taken order     compute costs. method name algorithm use. See details . fullreturn boolean specifying whether output function also include dual solution, optimal transport cost b transport plan matrix form returned well. control named list parameters chosen method result call trcontrol. parameters   \tset control argument get reasonable (sometimes problem specific) defaults. threads Integer specifying number threads used parallel computing. Currently available method \"networkflow\". ... currently without effect.","code":""},{"path":"/reference/transport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Optimal Transport Plan Between Two Objects — transport","text":"number algorithms currently implemented added future versions package.    following brief description key word used. Much details can found cited references    forthcoming package vignette. aha: Aurenhammer--Hoffmann--Aronov (1998) method multiscale approach presented Mérigot (2011). original theory limited \\(p=2\\). refer aha also extension idea \\(p=1\\) presented Hartmann Schuhmacher (2017) general \\(p\\) (currently implemented). auction: auction algorithm Bertsekas (1988) epsilon-scaling, see Bertsekas (1992). auctionbf: refined auction algorithm combines forward revers auction, see Bertsekas (1992). networkflow: fast implementation network simplex algorithm Nicolas Bonneel based LEMON Library (see citations ). primaldual: primal-dual algorithm described Luenberger (2003, Section 5.9). revsimplex: revised simplex algorithm described Luenberger Ye (2008, Section 6.4) various speed improvements, including multiscale approach. shielding: shielding (shortcut) method, described Schmitzer (2016). shortsimplex: shortlist method based revised simplex algorithm, described Gottschlich Schuhmacher (2014). order default key words specified argument method gives rough idea relative efficiency algorithms corresponding class objects. given b actual computation times may deviate significantly order.   class pgrid default method \"auto\", resolves \"revsimplex\" p 2 problem small, \"shielding\" otherwise. following table gives information applicability various algorithms (sometimes rather   current implementations).  : + recommended, * applicable (may slow), - implementation planned combination make sense; @ indicates aha algorithm available special combination pgrid object b wpp object (p 2). details combination see function semidiscrete. algorithm certain parameters supplied control argument. following table gives overview parameter names    applicability.  start specifies algorithm computing starting solution (needed). Currently Modified Row Minimum Rule   (start=\"modrowmin\"), North-West Corner Rule (start=\"nwcorner\") method Russell (1969) (start=\"russell\")   implemented. start=\"auto\" (default) ModRowMin Rule chosen. However,   transport.pgrid p larger 1, two cases automatic multiscale procedure also performed, .e. optimal transport first computed coarser grids information solutions used finer girds.   happens    method = \"revsimplex\", single coarsening factor scmult=2 performed, method = \"shielding\", number coarsenings adapted dimensions array performed. p=1 method=\"revsimplex\", well p=2 method=\"aha\" multiscale versions   corresponding algorithms allows finer control via parameters   nscales, scmult returncoarse. default value nscales=1 suppresses   multiscale version. larger problems advisable use multiscale version, currently implemented   square pgrids two dimensions. algorithm proceeds coarsening pgrid nscales-1 times, summarizing   time scmult^2 pixels one larger pixels, solving various transport problems starting coarsest   using previous problem compute starting solution next finer problem. returncoarse TRUE, coarser   problems solutions returned well (revsimplex ). factr, maxit corresponding components control argument optim L-BFGS-B method. lasteps, epsfac parameters used epsilon scaling auction algortihm. algorithm starts “transaction cost” per bid epsfac^k * lasteps reasonable k generating finer finer approximate solutions k counts zero. Note order procedure make sense, epsfac larger one (typically two- three-digit) order final solution exact lasteps smaller 1/n, n total number points either point patterns.   slength, kfound, psearched shortlist length, number pivot candidates needed, percentage   shortlists searched, respectively.","code":""},{"path":"/reference/transport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Optimal Transport Plan Between Two Objects — transport","text":"data frame columns , mass specifies element element b amount mass sent optimal transport plan. class pgrid elements specified vector indices terms usual column major enumeration matrices $mass b$mass. plot methods classes pgrid pp, can plot solution. returncoarse TRUE revsimplex method, list components sol prob giving solutions problems various scales considered. solution finest scale (.e. output obtain setting returncoarse FALSE) sol[[1]]. class pgrid b class wpp (p=2), object class power_diagram described help function semidiscrete. plot method class pgrid can plot solution.","code":""},{"path":"/reference/transport.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find Optimal Transport Plan Between Two Objects — transport","text":"F. Aurenhammer, F. Hoffmann B. Aronov (1998). Minkowski-type theorems least-squares clustering. Algorithmica 20(1), 61--76. D. P. Bertsekas (1988). auction algorithm: distributed relaxation method assignment problem. Annals Operations Research 14(1), 105--123. D. P. Bertsekas (1992). Auction algorithms network flow problems: tutorial introduction. Computational Optimization Applications 1, 7--66. N. Bonneel (2018). Fast Network Simplex Optimal Transport. Github repository, nbonneel/network_simplex. N. Bonneel, M. van de Panne, S. Paris W. Heidrich (2011). Displacement interpolation using Lagrangian mass transport. ACM Transactions Graphics (SIGGRAPH ASIA 2011) 30(6). Egervary Research Group Combinatorial Optimization, EGRES (2014). LEMON Graph Library v1.3.1. lemon.cs.elte.hu/trac/lemon. C. Gottschlich D. Schuhmacher (2014). shortlist method fast computation earth mover's distance finding optimal solutions transportation problems. PLOS ONE 9(10), e110214. doi: 10.1371/journal.pone.0110214 V. Hartmann D. Schuhmacher (2020). Semi-discrete optimal transport: solution procedure unsquared Euclidean distance case, Mathematical Methods Operations Research 92, 133--163. doi: 10.1007/s00186-020-00703-z D.G. Luenberger (2003). Linear nonlinear programming, 2nd ed. Kluwer. D.G. Luenberger Y. Ye (2008). Linear nonlinear programming, 3rd ed. Springer. Q. Mérigot (2011). multiscale approach optimal transport. Computer Graphics Forum 30(5), 1583--1592. doi: 10.1111/j.1467-8659.2011.02032.x B. Schmitzer (2016). sparse multiscale algorithm dense optimal transport. J. Math. Imaging Vision 56(2), 238--259. https://arxiv.org/abs/1510.05466","code":""},{"path":"/reference/transport.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find Optimal Transport Plan Between Two Objects — transport","text":"Dominic Schuhmacher schuhmacher@math.uni-goettingen.de Björn Bähre bjobae@gmail.com (code aha-method p=2) Nicolas Bonneel nicolas.bonneel@liris.cnrs.fr  (adaption LEMON code fast networkflow method) Carsten Gottschlich gottschlich@math.uni-goettingen.de  (original java code shortlist revsimplex methods) Valentin Hartmann valentin.hartmann@epfl.ch (code aha method p=1) Florian Heinemann florian.heinemann@uni-goettingen.de  (integration networkflow method) Bernhard Schmitzer schmitzer@uni-muenster.de (code shielding-method)","code":""},{"path":"/reference/transport.html","id":"use-of-cplex","dir":"Reference","previous_headings":"","what":"Use of CPLEX","title":"Find Optimal Transport Plan Between Two Objects — transport","text":"combination shielding-method CPLEX numerical solver outperforms algorithms order magnitude large problems (applicable p=2 objects class \"pgrid\"). local installation CPLEX available, transport package can linked installation. See file src/Makevars source package instructions.","code":""},{"path":"/reference/transport.html","id":"use-of-cgal","dir":"Reference","previous_headings":"","what":"Use of CGAL","title":"Find Optimal Transport Plan Between Two Objects — transport","text":"combination aha-method p=1 requires use CGAL (Computational Geometry Algorithms Library) dealing Apollonius diagrams. require functionality, install https://www.cgal.org/download.html adapt file src/Makevars package according instructions given file. re-install 'transport' source usual.","code":""},{"path":[]},{"path":"/reference/transport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Optimal Transport Plan Between Two Objects — transport","text":"","code":"# # example for the default method # a <- c(100, 200, 80, 150, 50, 140, 170, 30, 10, 70) b <- c(60, 120, 150, 110, 40, 90, 160, 120, 70, 80) set.seed(24) costm <- matrix(sample(1:20, 100, replace=TRUE), 10, 10)   res <- transport(a,b,costm)  # pretty-print solution in matrix form for very small problems: transp <- matrix(0,10,10) transp[cbind(res$from,res$to)] <- res$mass rownames(transp) <- paste(ifelse(nchar(a)==2,\" \",\"\"),a,sep=\"\") colnames(transp) <- paste(ifelse(nchar(b)==2,\" \",\"\"),b,sep=\"\") print(transp)   #>      60 120 150 110  40  90 160 120  70  80 #> 100  30   0   0  70   0   0   0   0   0   0 #> 200   0   0   0   0   0   0 160   0   0  40 #>  80   0   0   0  30   0  50   0   0   0   0 #> 150  30 120   0   0   0   0   0   0   0   0 #>  50   0   0  50   0   0   0   0   0   0   0 #> 140   0   0  60   0   0   0   0   0  40  40 #> 170   0   0   0   0  40  40   0  90   0   0 #>  30   0   0   0   0   0   0   0   0  30   0 #>  10   0   0   0  10   0   0   0   0   0   0 #>  70   0   0  40   0   0   0   0  30   0   0     # # example for class 'pgrid' # dev.new(width=9, height=4.5) par(mfrow=c(1,2), mai=rep(0.1,4)) image(random32a$mass, col = grey(0:200/200), axes=FALSE) image(random32b$mass, col = grey(0:200/200), axes=FALSE) res <- transport(random32a,random32b) #> Power p of Euclidean distance assumed to be 1  dev.new() par(mai=rep(0,4)) plot(random32a,random32b,res,lwd=1)   # # example for class 'pp' # set.seed(27) x <- pp(matrix(runif(400),200,2)) y <- pp(matrix(runif(400),200,2)) res <- transport(x,y) dev.new() par(mai=rep(0.02,4)) plot(x,y,res)   # # example for class 'wpp' # set.seed(30) m <- 30 n <- 60 massx <- rexp(m) massx <- massx/sum(massx) massy <- rexp(n) massy <- massy/sum(massy) x <- wpp(matrix(runif(2*m),m,2),massx) y <- wpp(matrix(runif(2*n),n,2),massy) res <- transport(x,y,method=\"revsimplex\") plot(x,y,res)   # # example for semidiscrete transport between class # 'pgrid' and class 'wpp' (p=2) # set.seed(33) n <- 100 massb <- rexp(n) massb <- massb/sum(massb)*1e5 b <- wpp(matrix(runif(2*n),n,2),massb) res <- transport(random32a,b,p=2) plot(random32a,b,res)   # # example for semidiscrete transport between class # 'pgrid' and class 'wpp' (p=1) # if (transport:::cgal_present()) {   set.seed(33)   n <- 30   massb <- rexp(n)   massb <- massb/sum(massb)*1e5   b <- wpp(matrix(runif(2*n),n,2),massb)   res <- transport(random32a,b,p=1)   plot(random32a,b,res) }"},{"path":"/reference/transport_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Dynamic Visualization of a Transference Plan Between Two pgrids — transport_track","title":"Create a Dynamic Visualization of a Transference Plan Between Two pgrids — transport_track","text":"Given two objects source target class pgrid transference plan, typically   result call transport, create animation dynamic transference plan   (.k.. displacement interpolation)","code":""},{"path":"/reference/transport_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Dynamic Visualization of a Transference Plan Between Two pgrids — transport_track","text":"","code":"transport_track(source, target, tplan, K = 50, scmult = 1, smooth = FALSE,      H = matrix(c(1,0,0,1),2,2), create.file = c(\"none\",\"gif_im\"),       file.name = \"Rtransport.gif\", fps = 20, cut = FALSE,      col=grey((0:1000)/1000),width=800,height=800)"},{"path":"/reference/transport_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Dynamic Visualization of a Transference Plan Between Two pgrids — transport_track","text":"source, target objects class pgrid. tplan transference plan source target, typically optimal transference plan     obtained call transport. K number intermediate frames produced source target. scmult factor number pixels dimension multiplied obtain smoother rendering    \tdynamic transference plan. smooth logical. Whether kernel smoothing linear binning procedure used generate images. Defaults FALSE. H bandwith matrix used perform two dimensional kernel density estimation linear binning respectively. create.file file type created \"none\" return array intermediate mass distributions. file.name path output file. Ignored create.file \"none\". fps number frames per second generated gif. default 20 frames per second. cut logical. Whether boundary pixels cut . Currently way deal edge effect (see Details). col vector RGB colours used generate gif, create.file \"none\". See      documentation image details. width interger specifying width images used generate output gif, create.file \"none\". height interger specifying width images used generate output gif, create.file \"none\".","code":""},{"path":"/reference/transport_track.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Dynamic Visualization of a Transference Plan Between Two pgrids — transport_track","text":"intermediate frames produced interpolation formula \\([(1-t)\\mathrm{pr}_1 + t\\mathrm{pr}_2]_{\\#} \\pi\\),    \\(\\pi\\) transference plan, \\(\\mathrm{pr}_1\\) \\(\\mathrm{pr}_2\\) first second coordinate projections \\(\\mathbf{R}^2 \\times \\mathbf{R}^2\\) onto \\(\\mathbf{R}^2\\), \\(t \\\\{0,1/(K+1), \\ldots, K/(K+1),1\\}\\). \\(\\pi\\) optimal transference plan yields displacement interpolation, least assume    underlying cost function Euclidean metric \\(p\\)-th power, \\(p = 1,2\\). kernel smoothing procedure gives usually nicer animations, takes several orders magnitudes longer. currently visible edge effects kernel smoothing linear binning procedure lead darker pixels boundary image. cut parameter may used remove boundary pixels completely thus produce smaller output. edge dealt adequatly future versions. Conversion animated gif performed system call convert tool ImageMagick. latter may    installed first.","code":""},{"path":"/reference/transport_track.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Create a Dynamic Visualization of a Transference Plan Between Two pgrids — transport_track","text":"Running function smooth=TRUE even moderate K can take long time!","code":""},{"path":"/reference/transport_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Dynamic Visualization of a Transference Plan Between Two pgrids — transport_track","text":"array containing various interpolation images. Unless create.file=\"none\", function mainly used side effect (saving file specified path).   array returned invisibly.","code":""},{"path":"/reference/transport_track.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a Dynamic Visualization of a Transference Plan Between Two pgrids — transport_track","text":"Florian Heinemann florian.heinemann@uni-goettingen.de    (slightly modified Dominic Schuhmacher dschuhm1@uni-goettingen.de)","code":""},{"path":[]},{"path":"/reference/transport_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Dynamic Visualization of a Transference Plan Between Two pgrids — transport_track","text":"","code":"if (requireNamespace(\"ks\", quietly = TRUE)) {   tplan <- transport(random32a,random32b)   series <- transport_track(random32a, random32b, tplan, scmult=3, create.file=\"none\")   dev.new(width=16,height=8)   oldpar <- par(mfrow=c(5,10), mai=rep(0.01,4))   for (i in 1:50) {      image(series[,,i], col=grey(seq(0,1,0.005)), asp=1, axes=FALSE,zlim=c(min(series),max(series)))   }   par(oldpar) }"},{"path":"/reference/trcontrol.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the Control Parameters Used by transport. — trcontrol","title":"Set the Control Parameters Used by transport. — trcontrol","text":"Set control parameters algorithm used function transport.","code":""},{"path":"/reference/trcontrol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the Control Parameters Used by transport. — trcontrol","text":"","code":"trcontrol(method = c(\"networkflow\", \"revsimplex\", \"shortsimplex\", \"primaldual\", \"aha\",           \"shielding\", \"auction\", \"auctionbf\"), para = list(),           start = c(\"auto\",          \"modrowmin\", \"nwcorner\", \"russell\"),            nscales = 1, scmult = 2,returncoarse = FALSE, a = NULL,           b = NULL, M = NULL, N = NULL)"},{"path":"/reference/trcontrol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the Control Parameters Used by transport. — trcontrol","text":"method algorithm used compute optimal transference plan. See details function transport.pgrid. para list parameters specific chosen method. See table help page function transport. start method == \"revsimplex\", method computing starting solution. nscales, scmult, returncoarse parameters multiscale versions certain algorithms. See help transport. ,b,M,N two objects b transportation problem solved sizes M     N objects. Based information available , trcontrol tries hard find reasonable values     control parameters algorithm specified directly.","code":""},{"path":"/reference/trcontrol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the Control Parameters Used by transport. — trcontrol","text":"details parameters individual algorithms see help page transport.","code":""},{"path":"/reference/trcontrol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the Control Parameters Used by transport. — trcontrol","text":"list components method, para, start, nscales, scmult, returncoarse   entered adapted/computed based arguments method, , b, M, N.","code":""},{"path":"/reference/trcontrol.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the Control Parameters Used by transport. — trcontrol","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de","code":""},{"path":"/reference/trcontrol.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set the Control Parameters Used by transport. — trcontrol","text":"function typically called user check parameter settings used   function transport given problem.","code":""},{"path":[]},{"path":"/reference/unbalanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Unbalanced Optimal Transport between pgrid Objects — unbalanced","title":"Unbalanced Optimal Transport between pgrid Objects — unbalanced","text":"Compute optimal transport unnormalized images / mass distributions (pgrid objects) option mass can dispose . Transport cost per unit distance transport  p-th power. Disposal cost per unit C^p.","code":""},{"path":"/reference/unbalanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unbalanced Optimal Transport between pgrid Objects — unbalanced","text":"","code":"unbalanced(   a,   b,   p = 1,   C = NULL,   method = c(\"networkflow\", \"revsimplex\"),   output = c(\"dist\", \"all\", \"rawres\"),   threads = 1 )"},{"path":"/reference/unbalanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unbalanced Optimal Transport between pgrid Objects — unbalanced","text":", b objects class pgrid compatible. p power \\(\\geq 1\\) applied transport disposal costs. order resulting unbalanced Wasserstein metric. C base disposal cost (without power p) method one \"networkflow\" \"revsimplex\", specifing algorithm used. See details. output character. One \"dist\", \"\" \"rawres\". Determines function returns: unbalanced Wasserstein distance; available information  transport plan extra mass; raw result obtained networkflow algorithm. latter format transport function option fullreturn=TRUE. choice output = \"rawres\" mainly intended internal use. threads integer specifying number threads parallel computing connection networkflow method.","code":""},{"path":"/reference/unbalanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unbalanced Optimal Transport between pgrid Objects — unbalanced","text":"output = \"dist\" single numeric, unbalanced \\((p,C)\\)-Wasserstein distance. Otherwise list. output = \"\" list saves , b, p, C attributes  following components: dist output = \"dist\". plan optimal transport plan. data frame columns , mass  specifies element element b amount mass sent.  specified vector indices terms usual column major enumeration  matrices $mass b$mass. plan can plotted via plot.pgrid(, b, plan). atrans, btrans matrices specifying masses transported point point,  respectively. Corresponds \\((\\pi^{(1)}_x)_{x \\G}\\) \\((\\pi^{(2)}_y)_{y \\G}\\) . aextra, bextra matrices specifying amount mass point b, respectively, transported needs disposed . Corresponds \\((a_x - \\pi^{(1)}_x)_{x \\G}\\) \\((b_y - \\pi^{(2)}_y)_{y \\G}\\). inplace matrix specifying amount mass point can stay place. Corresponds \\((\\pi_{x,x})_{x \\G}\\). Note atrans + aextra + inplace must equal $mass likewise b. warning occurs case (may indeed happen time time method revsimplex, error reported small).","code":""},{"path":"/reference/unbalanced.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unbalanced Optimal Transport between pgrid Objects — unbalanced","text":"Given two non-negative mass distributions (\"images\") \\(=(a_x)_{x \\G}\\), \\(b=(a_y)_{y \\G}\\) grid \\(G\\), function minimizes functional $$\\sum_{x,y \\G} \\pi_{x,y} d(x,y)^p + C^p \\bigl( \\sum_{x \\G} (a_x - \\pi^{(1)}_x) + \\sum_{y \\G} (b_y - \\pi^{(2)}_y) \\bigr)$$ \\((\\pi_{x,y})_{x,y \\G}\\) satisfying $$0 \\leq \\pi^{(1)}_x := \\sum_{y \\G} \\pi_{x,y} \\leq a_x \\ \\textrm{} \\ 0 \\leq \\pi^{(2)}_y := \\sum_{x \\G} \\pi_{x,y} \\leq b_y.$$ Thus \\(\\pi_{x,y}\\) denotes amount mass transported \\(x\\) \\(y\\), whereas \\(\\pi^{(1)}_x\\) \\(\\pi^{(2)}_y\\) total mass transported away \\(x\\) total mass transported \\(y\\), respectively. Accordingly \\(\\sum_{x \\G} (a_x - \\pi^{(1)}_x)\\) \\(\\sum_{y \\G} (b_y - \\pi^{(2)}_y)\\) total amounts mass \\(\\) \\(b\\), respectively, need disposed . minimal value functional taken \\(1/p\\) refer unbalanced \\((p,C)\\)-Wasserstein metric. metric used, various variants, number research papers. See Heinemann et al. (2022) references therein Müller et al. (2022), Remark 3. follow convention latter paper regarding parametrization use term unbalanced Wasserstein metric. practical difference two methods \"networkflow\" \"revsimplex\" can  roughly described follows. former typically faster large examples (64x64 beyond), especially several threads used. latter typically faster smaller examples (may relevant pairwise transports many objects computed) guarantees sparse(r) solution, .e. m+n+1 individual transports, m n number non-zero masses b, respectively). Note however due implementation revsimplex algorithm little less precise (roughly within 1e-7 tolerance). details algorithms see transport.","code":""},{"path":"/reference/unbalanced.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Unbalanced Optimal Transport between pgrid Objects — unbalanced","text":"Florian Heinemann, Marcel Klatt Axel Munk (2022).             Kantorovich-Rubinstein distance barycenter finitely supported measures: Foundations Algorithms.             Arxiv preprint.             doi: 10.48550/arXiv.2112.03581              Raoul Müller, Dominic Schuhmacher Jorge Mateu (2020).             Metrics barycenters point pattern data             Statistics Computing 30, 953-972.             doi: 10.1007/s11222-020-09932-y","code":""},{"path":[]},{"path":"/reference/unbalanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unbalanced Optimal Transport between pgrid Objects — unbalanced","text":"","code":"a <- pgrid(matrix(1:12, 3, 4)) b <- pgrid(matrix(c(9:4, 12:7), 3, 4)) res1 <- unbalanced(a, b, 1, 0.5, output=\"all\") res2 <- unbalanced(a, b, 1, 0.3, output=\"all\") plot(a, b, res1$plan, angle=20, rot=TRUE)  plot(a, b, res2$plan, angle=20, rot=TRUE)  par(mfrow=c(1,2)) matimage(res2$aextra, x = a$generator[[1]], y = a$generator[[2]]) matimage(res2$bextra, x = b$generator[[1]], y = b$generator[[2]])"},{"path":"/reference/wasserstein.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Wasserstein Distance Between Two Objects — wasserstein","title":"Compute the Wasserstein Distance Between Two Objects — wasserstein","text":"Given two objects b specify measures \\(R^d\\), compute Wasserstein distance   order p objects.","code":""},{"path":"/reference/wasserstein.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Wasserstein Distance Between Two Objects — wasserstein","text":"","code":"wasserstein(a, b, p=1, tplan=NULL, costm=NULL, prob=TRUE, ...)"},{"path":"/reference/wasserstein.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Wasserstein Distance Between Two Objects — wasserstein","text":", b two objects describe mass distributions \\(R^d\\). Either class pgrid pp     wpp numeric. first three dimension \\(d\\) structures must least 2; see function wasserstein1d \\(d=1\\). p power \\(\\geq 1\\) Euclidean distance points taken order     compute transportation costs. tplan optional transference plan format returned function transport. NULL optimal     transference plan based , b p computed call transport. costm matrix costs support points measures. Ignored unless b numeric vectors. prob logical. objects , b interpreted probability measures, .e. total mass normalized 1? ... parameters passed transport tplan NULL.","code":""},{"path":"/reference/wasserstein.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Wasserstein Distance Between Two Objects — wasserstein","text":"Wasserstein distance order p defined p-th root total cost incurred transporting measure   measure b optimal way, cost transporting unit mass \\(x\\) \\(y\\) given p-th    power \\(\\|x-y\\|^p\\) Euclidean distance. tplan supplied user, checks performed whether optimal given problem.   function may used compare different (maybe suboptimal) transference plans regard total costs. details algorithms used, see help transport.","code":""},{"path":"/reference/wasserstein.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Wasserstein Distance Between Two Objects — wasserstein","text":"single number, Wasserstein distance specified problem.","code":""},{"path":"/reference/wasserstein.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the Wasserstein Distance Between Two Objects — wasserstein","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de","code":""},{"path":[]},{"path":"/reference/wasserstein.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Wasserstein Distance Between Two Objects — wasserstein","text":"","code":"# # example for class 'pgrid' # wasserstein(random32a,random32b,p=1) #> [1] 0.08432792 res <- transport(random32a,random32b,p=2) #> If you have CPLEX available, the computation of optimal transport for the current data (with p=2) can be accelerated considerably by linking against it. #> To do so, adapt the file src/Makevars in the package source of 'transport' according to the instructions given there. Then install from source as usual. #> This message will appear only once per session. To turn it off completely say 'options(\"transport-CPLEX_no_warn\" = TRUE)' on startup (e.g. in a .Rprofile file). wasserstein(random32a,random32b,p=1,res) #> [1] 0.09280022 # is larger than above: # the optimal transport for p=2 is not optimal for p=1  # # example for class 'pp' # set.seed(27) x <- pp(matrix(runif(500),250,2)) y <- pp(matrix(runif(500),250,2)) wasserstein(x,y,p=1) #> [1] 0.06789285 wasserstein(x,y,p=2) #> [1] 0.07979027"},{"path":"/reference/wasserstein1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Wasserstein Distance Between Two Univariate Samples — wasserstein1d","title":"Compute the Wasserstein Distance Between Two Univariate Samples — wasserstein1d","text":"Given two vectors b, compute Wasserstein distance   order p empirical distributions.","code":""},{"path":"/reference/wasserstein1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Wasserstein Distance Between Two Univariate Samples — wasserstein1d","text":"","code":"wasserstein1d(a, b, p = 1, wa = NULL, wb = NULL)"},{"path":"/reference/wasserstein1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Wasserstein Distance Between Two Univariate Samples — wasserstein1d","text":", b two vectors. p positive number. order Wasserstein distance. wa, wb optional vectors non-negative weights b.","code":""},{"path":"/reference/wasserstein1d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Wasserstein Distance Between Two Univariate Samples — wasserstein1d","text":"Wasserstein distance order p defined p-th root total cost incurred transporting pile mass another pile mass optimal way, cost transporting unit mass \\(x\\) \\(y\\) given p-th power \\(\\|x-y\\|^p\\) Euclidean distance. present function vector represents locations real line \\(m\\) deposits mass \\(1/m\\) vector b locations \\(n\\) deposits mass \\(1/n\\). user specifies weights wa wb, default masses replaced wa/sum(wa) wb/sum(wb), respectively. terms empirical distribution function \\(F(t) = \\sum_{=1}^m w^{()}_i 1\\{a_i \\leq t\\}\\) locations \\(a_i\\) normalized weights \\(w^{()}_i\\), corresponding function \\(G(t) = \\sum_{j=1}^n w^{(b)}_j 1\\{b_j \\leq t\\}\\) b, Wasserstein distance 1-d given   $$W_p(F,G) = \\left(\\int_0^1 |F^{-1}(u)-G^{-1}(u)|^p \\; du \\right)^{1/p},$$   \\(F^{-1}\\) \\(G^{-1}\\) generalized inverses. \\(p=1\\), also $$W_1(F,G) = \\int_{-\\infty}^{\\infty} |F(x)-G(x)| \\; dx.$$","code":""},{"path":"/reference/wasserstein1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Wasserstein Distance Between Two Univariate Samples — wasserstein1d","text":"single number, Wasserstein distance specified data.","code":""},{"path":"/reference/wasserstein1d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the Wasserstein Distance Between Two Univariate Samples — wasserstein1d","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de","code":""},{"path":[]},{"path":"/reference/wasserstein1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Wasserstein Distance Between Two Univariate Samples — wasserstein1d","text":"","code":"x <- rnorm(200)   y <- rnorm(150,2)   wasserstein1d(x,y) #> [1] 2.042685"},{"path":"/reference/wpp-object.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Weighted Point Patterns — wpp-object","title":"Class of Weighted Point Patterns — wpp-object","text":"class \"wpp\" represents discrete measures positive mass finitely many locations.","code":""},{"path":"/reference/wpp-object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class of Weighted Point Patterns — wpp-object","text":"Objects class \"wpp\" may created function    wpp, commonly used input function   transport. methods plot, print   summary class. object class \"wpp\" contains following elements:","code":""},{"path":"/reference/wpp-object.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class of Weighted Point Patterns — wpp-object","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de    Timo Wilm timo.wilm@stud.uni-goettingen.de","code":""},{"path":[]},{"path":"/reference/wpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the wpp Class — wpp","title":"Constructor for the wpp Class — wpp","text":"Construct object class \"wpp\" matrix points vector masses.","code":""},{"path":"/reference/wpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the wpp Class — wpp","text":"","code":"wpp(coordinates, mass)"},{"path":"/reference/wpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the wpp Class — wpp","text":"coordinates matrix specifying coordinates points. row corresponds point. mass vector non-negative values specifying masses points.","code":""},{"path":"/reference/wpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for the wpp Class — wpp","text":"detailed explanations arguments components returned object class \"wpp\", see    wpp-object. legitimate assign mass 0 individual points arguments. However, constructing wpp-object points deleted. coordinates deleted points can still accessed via attribute zeropoints.","code":""},{"path":"/reference/wpp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructor for the wpp Class — wpp","text":"Dominic Schuhmacher dschuhm1@uni-goettingen.de    Timo Wilm timo.wilm@stud.uni-goettingen.de","code":""},{"path":[]},{"path":"/reference/wpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for the wpp Class — wpp","text":"","code":"m <- matrix(c(1,1,2,2,3,1,4,2),4,2) a <- pp(m) print(a) #> Pattern of 4 points in 2 dimensions. #> Minimal coordinates: 1 1  #> Maximal coordinates: 2 4  print.default(a) #> $dimension #> [1] 2 #>  #> $N #> [1] 4 #>  #> $coordinates #>      [,1] [,2] #> [1,]    1    3 #> [2,]    1    1 #> [3,]    2    4 #> [4,]    2    2 #>  #> attr(,\"class\") #> [1] \"pp\"  if (FALSE) {     plot(a)}"}]
